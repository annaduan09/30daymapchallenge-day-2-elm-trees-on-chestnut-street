ifelse(ST_NAME == "ARCH", "MULBERRY (ARCH)",
ifelse(ST_NAME == "SOUTH", "CEDAR (SOUTH)",
ST_NAME)))) %>%
st_transform("ESRI:102729") %>%
group_by(ST_NAME) %>%
summarize(geometry = st_union(geometry)) %>%
st_crop(xmin= 2668840, ymin= 227174.5, xmax= 2700284, ymax= 241808.4)
# buffer to capture trees on either side of street
phl_st_buff <- phl_st %>%
st_buffer(100)
# select out trees in center city region to match phl_st
tree <- st_read("Data/PPR_Tree_Inventory_2022.geojson")%>%
st_transform("ESRI:102729") %>%
mutate(TREE_NAME = sub(".*- ", "", TREE_NAME),
TREE_NAME = str_to_title(TREE_NAME),
TREE_NAME = ifelse(grepl("Cherry", TREE_NAME) == TRUE, "Cherry",
ifelse(grepl("Maple", TREE_NAME) == TRUE, "Maple",
ifelse(grepl("Oak", TREE_NAME) == TRUE, "Oak",
ifelse(grepl("Spruce", TREE_NAME) == TRUE, "Spruce",
ifelse(grepl("Elm", TREE_NAME) == TRUE, "Elm",
ifelse(grepl("Crabapple", TREE_NAME) == TRUE, "Crabapple",
ifelse(grepl("Linden", TREE_NAME) == TRUE, "Linden",
ifelse(grepl("Hawthorn", TREE_NAME) == TRUE, "Hawthorn", TREE_NAME))))))))) %>%
filter(is.na(TREE_NAME) == FALSE & TREE_NAME != "Unknown" & TREE_NAME != "" & TREE_NAME != " ") %>%
st_crop(xmin= 2668840, ymin= 227174.5, xmax= 2700284, ymax= 241808.4)
tree_st <- tree %>%
st_intersection(phl_st_buff)
species_st <- tree_st %>%
st_drop_geometry() %>%
mutate(count = 1) %>%
dplyr::group_by(TREE_NAME, ST_NAME) %>%
dplyr::summarize(count = sum(count)) %>%
arrange(desc(count)) %>%
ungroup() %>%
group_by(ST_NAME) %>%
slice_max(order_by = count, n = 1) %>%
ungroup() %>%
left_join(phl_st) %>%
st_as_sf()
species_all <- tree_st %>%
mutate(count = 1) %>%
dplyr::group_by(TREE_NAME) %>%
dplyr::summarize(count = sum(count)) %>%
arrange(desc(count)) %>%
st_drop_geometry()
species_street_df <- tree_st %>%
mutate(count = 1) %>%
dplyr::group_by(TREE_NAME, ST_NAME) %>%
dplyr::summarize(count = sum(count)) %>%
arrange(desc(count)) %>%
ungroup() %>%
st_drop_geometry()
# blue background rectangle for water features
water_rect <- st_as_sfc(st_bbox(panj_zcta), crs = "ESRI:102729")
# palette
pal <- c("chartreuse2", "orchid1","cyan4", "orange1", "turquoise", "yellow")
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st %>% st_buffer(50), aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st, aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st, aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st, aes(color = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st, aes(color = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st %>% st_buffer(50), aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow4"))
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st %>% st_buffer(50), aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow1"))
#### waffle plots ####
# Split the data frame by ST_NAME to create a list of data frames
list_of_dfs <- split(species_street_df, species_street_df$ST_NAME)
# Function to process each data frame and get the top 6 species
process_df <- function(df) {
# Order by descending count
df <- df[order(-df$count), ]
# Keep only the top 6 species
top6 <- head(df, 6)
# Create a named vector for these top 6 species
top6_vector <- setNames(top6$count, top6$TREE_NAME)
return(top6_vector)
}
# Apply the function to each data frame in the list to create the vectors
street_vectors <- lapply(list_of_dfs, process_df)
# Name the vectors with 'species_' prefix and the street names
list2env(setNames(street_vectors, paste0("species_", names(street_vectors))), envir = .GlobalEnv)
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 11,
colors = pal)
# palette
pal <- c("Callery Pear" = "chartreuse2", "Locust" = "orchid1", "London Planetree" = "cyan4", "Maple" = "orange1", "Oak" = "turquoise", "Elm" = "yellow")
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st %>% st_buffer(50), aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow1"))
View(tree_species)
View(species_st)
# palette
pal <- c("Callery Pear" = "chartreuse2", "Honeylocust" = "orchid1", "London Planetree" = "cyan4", "Maple" = "orange1", "Oak" = "turquoise", "Elm" = "yellow")
# map
ggplot() +
geom_sf(data = water_rect, fill = "lightblue2") +
geom_sf(data = panj_zcta, fill = "snow2", color = NA, size = 0.5) +
geom_sf(data = phl_zcta, fill = "snow1", color = NA, size = 0.8) +
geom_sf(data = bg_st, color = "snow2") +
geom_sf(data = species_st %>% st_buffer(50), aes(color = TREE_NAME, fill = TREE_NAME), size = 10) +
scale_color_manual(values = pal) +
scale_fill_manual(values = pal) +
labs(color = "", fill = "") +
theme_void() + theme(legend.position = c(0.15, 0.25),
legend.text = element_text(color = "snow1"))
#### waffle plots ####
# Split the data frame by ST_NAME to create a list of data frames
list_of_dfs <- split(species_street_df, species_street_df$ST_NAME)
# Function to process each data frame and get the top 6 species
process_df <- function(df) {
# Order by descending count
df <- df[order(-df$count), ]
# Keep only the top 6 species
top6 <- head(df, 6)
# Create a named vector for these top 6 species
top6_vector <- setNames(top6$count, top6$TREE_NAME)
return(top6_vector)
}
# Apply the function to each data frame in the list to create the vectors
street_vectors <- lapply(list_of_dfs, process_df)
# Name the vectors with 'species_' prefix and the street names
list2env(setNames(street_vectors, paste0("species_", names(street_vectors))), envir = .GlobalEnv)
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 11,
colors = pal)
waffle(`species_CHERRY`/2, rows = 11,
colors = pal)
waffle(`species_CHESTNUT`/2, rows = 11,
colors = pal)
waffle(`species_LOCUST`/2, rows = 11,
colors = pal)
waffle(`species_WALNUT`/2, rows = 11,
colors = pal)
waffle(`species_MULBERRY (ARCH)`/2, rows = 11,
colors = pal)
waffle(`species_PINE`/2, rows = 11,
colors = pal)
waffle(`species_SASSAFRAS (RACE)`/2, rows = 11,
colors = pal)
waffle(`species_CEDAR (SPRUCE)`/2, rows = 11,
colors = pal)
unique_species <- unique(species_street_df$TREE_NAME)
unique_species
list_of_dfs
head(list_of_dfs)
head(list_of_dfs$PINE)
# palette
top_species_per_street <- lapply(list_of_dfs, function(df) {
head(df$TREE_NAME, 6)
})
# Unlist to create a single vector with all species
all_top_species <- unlist(top_species_per_street)
# Get unique species from this combined vector
unique_top_species <- unique(all_top_species)
unique_top_species
# palette
pal <- c("Callery Pear" = "chartreuse2", "Honeylocust" = "orchid1", "London Planetree" = "cyan4", "Maple" = "orange1", "Oak" = "turquoise", "Elm" = "yellow", "Cherry" = "#FF007F",
"Linden" = "#ADFF2F",
"Ginkgo" = "#FFD700",
"Japanese Zelkova" = "#BA55D3")
# palette
pal <- c("Callery Pear" = "chartreuse2", "Honeylocust" = "orchid1",
"London Planetree" = "cyan4", "Maple" = "orange1",
"Oak" = "turquoise", "Elm" = "yellow", "Cherry" = "navy",
"Linden" = "pink", "Ginkgo" = "salmon", "Japanese Zelkova" = "thistle1")
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 11,
colors = pal)
waffle(`species_CHERRY`/2, rows = 11,
colors = pal)
waffle(`species_CHESTNUT`/2, rows = 11,
colors = pal)
waffle(`species_LOCUST`/2, rows = 11,
colors = pal)
waffle(`species_WALNUT`/2, rows = 11,
colors = pal)
waffle(`species_MULBERRY (ARCH)`/2, rows = 11,
colors = pal)
waffle(`species_PINE`/2, rows = 11,
colors = pal)
waffle(`species_SASSAFRAS (RACE)`/2, rows = 11,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 11,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 10,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2, rows = 12,
colors = pal)
waffle(`species_CHERRY`/2, rows = 11,
colors = pal)
waffle(`species_CHERRY`/2, rows = 5,
colors = pal)
waffle(`species_CHERRY`/2, rows = 8,
colors = pal)
waffle(`species_CHERRY`/2, rows = 99,
colors = pal)
waffle(`species_CHERRY`/2, rows = 9,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/3,
colors = pal)
waffle(`species_CHERRY`/2,
colors = pal)
waffle(`species_CHERRY`,
colors = pal)
waffle(`species_CHERRY`/1.5,
colors = pal)
waffle(`species_CHERRY`/3,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2,
colors = pal)
waffle(`species_CHERRY`/2,
colors = pal)
waffle(`species_CHESTNUT`/2,
colors = pal)
waffle(`species_LOCUST`/2,
colors = pal)
waffle(`species_CHERRY`/2,
colors = pal)
waffle(`species_CHESTNUT`/2,
colors = pal)
waffle(`species_LOCUST`/2,
colors = pal)
waffle(`species_WALNUT`/2, rows = 11,
colors = pal)
waffle(`species_WALNUT`/2,
colors = pal)
waffle(`species_MULBERRY (ARCH)`/2, rows = 11,
colors = pal)
waffle(`species_PINE`/2, rows = 11,
colors = pal)
waffle(`species_SASSAFRAS (RACE)`/2, rows = 11,
colors = pal)
# plots
waffle(`species_CEDAR (SOUTH)`/2,
colors = pal, title = "cedar")
waffle(`species_CHERRY`/2,
colors = pal, title = "cherry")
waffle(`species_CHESTNUT`/2,
colors = pal, title = "chestnut")
waffle(`species_LOCUST`/2,
colors = pal, title = "locust")
waffle(`species_WALNUT`/2,
colors = pal, title = "walnut")
waffle(`species_MULBERRY (ARCH)`/2, rows = 11,
colors = pal, title = "arch(mulberry)")
waffle(`species_PINE`/2, rows = 11,
colors = pal, title = "pine")
waffle(`species_SASSAFRAS (RACE)`/2, rows = 11,
colors = pal, title = "race (sassafras)")
waffle(`species_SPRUCE`/2, rows = 11,
colors = pal)
waffle(`species_CEDAR`/2, rows = 11,
colors = pal)
View(phl_st)
#### waffle plots ####
# Split the data frame by ST_NAME to create a list of data frames
list_of_dfs <- split(species_street_df, species_street_df$ST_NAME)
View(list_of_dfs)
# Function to process each data frame and get the top 6 species
process_df <- function(df) {
# Order by descending count
df <- df[order(-df$count), ]
# Keep only the top 6 species
top6 <- head(df, 6)
# Create a named vector for these top 6 species
top6_vector <- setNames(top6$count, top6$TREE_NAME)
return(top6_vector)
}
waffle(`species_SPRUCE`/2, rows = 11,
colors = pal)
waffle(`species_SPRUCE`/2, rows = 11,
colors = pal, title = "spruce")
# plots
waffle(`species_CEDAR (SOUTH)`/2,
colors = pal, title = "south (cedar)")
# plots
waffle(`species_CEDAR (SOUTH)`/2,
colors = pal, title = "south (cedar)")
# plots
waffle(`species_CEDAR (SOUTH)`/3,
colors = pal, title = "south (cedar)")
waffle(`species_CHERRY`/2,
colors = pal, title = "cherry")
waffle(`species_CHERRY`/1.5,
colors = pal, title = "cherry")
waffle(`species_CHESTNUT`/2,
colors = pal, title = "chestnut")
waffle(`species_CHESTNUT`/4,
colors = pal, title = "chestnut")
waffle(`species_CHESTNUT`/5,
colors = pal, title = "chestnut")
waffle(`species_CHESTNUT`/6,
colors = pal, title = "chestnut")
waffle(`species_WALNUT`/2,
colors = pal, title = "walnut")
waffle(`species_WALNUT`/7,
colors = pal, title = "walnut")
waffle(`species_LOCUST`/2,
colors = pal, title = "locust")
waffle(`species_LOCUST`/4,
colors = pal, title = "locust")
waffle(`species_SPRUCE`/2, rows = 11,
colors = pal, title = "spruce")
waffle(`species_SPRUCE`/4, rows = 11,
colors = pal, title = "spruce")
waffle(`species_SPRUCE`/6, rows = 11,
colors = pal, title = "spruce")
waffle(`species_SPRUCE`/5, rows = 11,
colors = pal, title = "spruce")
waffle(`species_MULBERRY (ARCH)`/2, rows = 11,
colors = pal, title = "arch(mulberry)")
waffle(`species_MULBERRY (ARCH)`/3, rows = 11,
colors = pal, title = "arch(mulberry)")
waffle(`species_PINE`/2, rows = 11,
colors = pal, title = "pine")
waffle(`species_PINE`/6, rows = 11,
colors = pal, title = "pine")
waffle(`species_PINE`/5, rows = 11,
colors = pal, title = "pine")
waffle(`species_PINE`/5.5, rows = 11,
colors = pal, title = "pine")
waffle(`species_SPRUCE`/5,
colors = pal, title = "spruce")
waffle(`species_SPRUCE`/5.5,
colors = pal, title = "spruce")
waffle(`species_MULBERRY (ARCH)`/3,
colors = pal, title = "arch(mulberry)")
waffle(`species_MULBERRY (ARCH)`/3.5,
colors = pal, title = "arch(mulberry)")
waffle(`species_PINE`/5.5,
colors = pal, title = "pine")
waffle(`species_PINE`/6,
colors = pal, title = "pine")
waffle(`species_SASSAFRAS (RACE)`/2,
colors = pal, title = "race (sassafras)")
waffle(`species_SASSAFRAS (RACE)`/6,
colors = pal, title = "race (sassafras)")
waffle(`species_SASSAFRAS (RACE)`/4,
colors = pal, title = "race (sassafras)")
waffle(`species_SASSAFRAS (RACE)`/3,
colors = pal, title = "race (sassafras)")
waffle(`species_SASSAFRAS (RACE)`/3.5,
colors = pal, title = "race (sassafras)")
unique_species
unique_top_species
# create legend
# Set up the plot area
par(mar=c(1, 1, 1, 1)) # Set margins to small values
plot.new() # Create a new plot
# Determine the number of colors in the palette
num_colors <- length(pal)
# Plot squares with the specified colors
for (i in 1:num_colors) {
# Draw a filled rectangle with the appropriate color
rect((i-1)/num_colors, 0, i/num_colors, 1, col=pal[i], border="white")
# Add the species name as text in the middle of the square
text((i-0.5)/num_colors, 0.5, names(pal)[i], cex=0.8)
}
# Adjust the plot settings to ensure the legend is square
range_x <- par("usr")[1:2]
range_y <- par("usr")[3:4]
max_range <- max(range_x[2] - range_x[1], range_y[2] - range_y[1])
plot_width <- max_range * num_colors
plot_height <- max_range
par(plt=c(0, plot_width, 0, plot_height), new=TRUE)
# create legend
# Create a plotting area
plot.new()
par(mar = rep(1, 4))  # Set margins
# create legend
# Create a plotting area
plot.new()
par(mar = rep(1, 4))  # Set margins
# Define the plot coordinates
plot.window(xlim = c(0, grid_size), ylim = c(0, grid_size))
# create legend
# Create a plotting area
plot.new()
par(mar = rep(1, 4))  # Set margins
# Define the plot coordinates
plot.window(xlim = c(0, 100), ylim = c(0, 100))
# Draw the squares and add text
for (i in 1:num_colors) {
# Determine the row and column for the square
col <- (i - 1) %% grid_size
row <- grid_size - (i - 1) %/% grid_size
# Define the corners of the square
xleft <- col
ybottom <- row - 1
xright <- col + 1
ytop <- row
# Draw the square
rect(xleft, ybottom, xright, ytop, col = pal[i], border = NA)
# Add species name in white and bold
text(xleft + 0.5, ybottom + 0.5, labels = names(pal)[i], col = "white", font = 2)
}
# create legend
# Create a plotting area
plot.new()
par(mar = rep(1, 4))  # Set margins
# Define the plot coordinates
plot.window(xlim = c(0, 100), ylim = c(0, 100))
# Draw the squares and add text
for (i in 1:num_colors) {
# Determine the row and column for the square
col <- (i - 1) %% 100
row <- 100 - (i - 1) %/% 100
# Define the corners of the square
xleft <- col
ybottom <- row - 1
xright <- col + 1
ytop <- row
# Draw the square
rect(xleft, ybottom, xright, ytop, col = pal[i], border = NA)
# Add species name in white and bold
text(xleft + 0.5, ybottom + 0.5, labels = names(pal)[i], col = "white", font = 2)
}
# Adjust outer margins if needed
par(oma = rep(2, 4))
